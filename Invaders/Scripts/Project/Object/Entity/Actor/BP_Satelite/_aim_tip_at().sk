&blueprint
(Vector3 world_point)
[
  // Not 100% accurate, but close enough for space invaders
  // This is actually not the best way to do this. If framerate is too high
  // it's possible that the dish will never reach its destination point since
  // delta seconds will be too large. Try to compensate for this with a large
  // error tolerance in the nearly equal check.
  // We should refactor this to interpto instead so that we are guaranteed to close
  // in on the solution.
  !bone_dish : "dish-rotation_bone_01".Name
  !bone_laser : "Laser".Name
  !current_loc : @poseable_mesh.bone_location_by_name(bone_dish, EBoneSpaces.@@world_space)
  !dir_desired: MathLib.normal(world_point - current_loc)
  
  loop
  [
    !dir_current : @poseable_mesh.socket_rotation(bone_laser).Vector3
    !cross : dir_current.cross(dir_desired)
        
    !mult : if cross.@x < 0[-1.0] else[1.0]
    !amount : GameLib.world_delta_seconds * @rotation_rate * mult
    
    !rot_bone_comp : @poseable_mesh.bone_rotation_by_name(bone_dish, EBoneSpaces.@@component_space)
    @poseable_mesh.bone_rotation_by_name_set(bone_dish, rot_bone_comp + RotationAngles!yaw_pitch_roll(0 amount 0), EBoneSpaces.@@component_space)
    [exit] when MathLib.nearly_equal_float_float(cross.@x, 0.0, 1e-2)
    _wait
  ]
]